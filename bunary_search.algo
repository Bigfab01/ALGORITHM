//x = 7
// 0 1 2 3 4 5 6 7 8 9 //Indexing
// 1 2 3 4 5 6 7 8 9 10 //length = 10; 10/2 = 5 Searching for 7
// 7 8 9 10 //length = 4; 4/2 = 2
FUNCTION binary_search(arr : ARRAY_OF INTEGER, x: INTEGER) : INTEGER
VAR
    left, right, mid : INTEGER; //The three part we are dividing variables to
BEGIN
    left := 0; //left is 0 bcz left start from left index
    right := arr.length-1; //right equal array lengh bcz right already took all index aside index 0
    
    //X = 3
    WHILE (left < right) DO // while next varaible in the length is greater than the left(0), DO-RUN
        mid := left + (right - left)/2; // MidIndex = 4 := Value 5 
                                        //MidIndex = 1 := Value 2
        // check if x is present in the mid
        IF (arr[mid] = x) THEN //is 5 == 7: False //8 == 7 False //7 == 7
            RETURN mid;
        END_IF

        // if x is lesser, ignore the right half       //If x is lesser then ignore the whole right half and focus on left
        IF (x < arr[mid]) THEN //is 3 < 5: True // is 3 < 2 False    If x is less than array-mid then ru until you find array that equals X
            right := mid-1; //Right = 4 - 1 = 3; Value    //If right array equal mid array minus 1, then right array equals 4(index 3) minus 1(index 0) which equals 3
        ELSE   //Paraveture or May or IF 
            // if x is greater, ignore the left half     //If X is greater than whole left, focus on the right
            left := mid+1; //Left = 4 + 1 = 5; Value // Left 1 + 1 = 2  //left equal mid array plus 1, which mean left equal 4 plus 1 equal 5
        END_IF  //End if X is found
    END_WHILE
    
    // if we reached here then the element is not present
    RETURN -1  ;
END